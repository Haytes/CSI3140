function shuffle(a) {
    var j, x, i;
    for (i = a.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = a[i];
        a[i] = a[j];
        a[j] = x;
    }
    return a;
}

function getTile(r,c){
	return document.getElementById('puzzle-grid').getElementsByTagName('tr')[r].getElementsByTagName('td')[c];
}

function swap_tiles(a, b) {
	var tmp = a.className;
	a.className = b.className;
	b.className = tmp;
}

function tile_click(){
	var tileSiblings = this.parentNode.getElementsByTagName('td');
	var col = 0;
	while(this !== tileSiblings[col] && col < tileSiblings.length) ++col;

	var currentRow = this.parentNode;
	var rowSiblings = currentRow.parentNode.getElementsByTagName('tr');
	var row = 0;
	while(currentRow !== rowSiblings[row] && row < rowSiblings.length) ++row;

	if(row < 3 && getTile(row+1,col).className == 'tile_0') // row under
		swap_tiles(this, getTile(row+1,col));
	else if(col < 3 && getTile(row,col+1).className == 'tile_0') // slot to the right
		swap_tiles(this, getTile(row,col+1));
	else if(row > 0 && getTile(row-1,col).className == 'tile_0') // row over
		swap_tiles(this, getTile(row-1,col));
	else if(col > 0 && getTile(row,col-1).className == 'tile_0') // slot to the left
		swap_tiles(this, getTile(row,col-1));
	else
		alert('Illegal move! Please click a tile adjacent to the empty slot.');
}

function populateTable(){
	var tileOrder = shuffle([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
	var i = 0;
	var rows = document.getElementById('puzzle-grid').getElementsByTagName("tr");
	for(r = 0; r < rows.length; ++r) {
		var tiles = rows[r].getElementsByTagName('td');
		for(t = 0; t < tiles.length; ++t) {
			tiles[t].className = 'tile_' + tileOrder[i++];
			tiles[t].onclick = tile_click;
		}
	}
}

document.addEventListener("DOMContentLoaded", populateTable);